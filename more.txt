# Build Network Security Group rules

$rules = @(); 
## NSG source rules 
$nsg = Get-AzureRmNetworkSecurityGroup -ResourceGroupName $rgName -Name $sourcensgname 

$existingRules = $nsg.SecurityRules
$rulesToDelete = @()
ForEach ($existingrule in $existingRules) { 
#for ($i=$existingRules.lists.count-1; $i –lt  existingRules.co; $i--){
#for ($i=0; $i -lt $web.Count; $i++){
#$existingrule = $existingRules[$i];
Write-Output("hello from nsg "+$existingrule.Name )
If ($existingrule.Name.StartsWith("Allow_Azure_Out_")) 
          {
      #        Write-Output("removing from nsg "+$existingrule.Name)
          ## Not relevent 
              $rulesToDelete += $existingrule;

          }else {
           ## Adding the custom rule to Rules array. This array will be appended with Azure ip rules 
           $rules +=$existingrule; 
          }
}

# $nsg = Set-AzureRmNetworkSecurityGroup -NetworkSecurityGroup  $nsg


ForEach ($subnet in $ipRange.Subnet) {

  $ruleName = "Allow_Azure_Out_GG" + $subnet.Replace("/","-"); 
  ## Add new Azure ip rule to Array 
  $rules += 
      New-AzureRmNetworkSecurityRuleConfig `
              -Name $ruleName `
              -Description "Allow outbound to Azure $subnet" `
              -Access Allow `
              -Protocol * `
              -Direction Outbound `
              -Priority $rulePriority `
              -SourceAddressPrefix VirtualNetwork `
              -SourcePortRange * `
              -DestinationAddressPrefix "$subnet" `
              -DestinationPortRange *; 


      $rulePriority++; 
  }
Write-Output ("me rules + $rules");

## This can be removed 
$rules += 
   New-AzureRmNetworkSecurityRuleConfig `
          -Name "Deny_Internet_Out" `
          -Description "Deny outbound to Internet" `
          -Access Deny `
          -Protocol * `
          -Direction Outbound `
          -Priority 4001 `
          -SourceAddressPrefix VirtualNetwork `
          -SourcePortRange * `
          -DestinationAddressPrefix Internet `
          -DestinationPortRange *; 


# Create a new Network Security Group. This will then be attached to the defined  subnet
### Create new NSG Name based on d
  $nsgname2 ="allow_rules_"+(get-date -f yyyyMMdd.HH.mm);
  ## Create new Group with new rules Array 
  $nsg = 
       New-AzureRmNetworkSecurityGroup `
          -Name "$nsgname2" `
          -ResourceGroupName $rgName `
          -Location $location `
          -SecurityRules $rules; 
  ## Get the defined vnet
      $vnet = (Get-AzureRmVirtualNetwork -ResourceGroupName   $rgName  -Name $vnetname ); 


   ## Get the subnet from the Vnet    
      $subnet = $vnet.Subnets | 
          Where-Object Name -eq $subnetName

  # Associate NSG to selected Subnet
     Set-AzureRmVirtualNetworkSubnetConfig  `
          -VirtualNetwork $vnet `
          -Name $subnetName `
          -AddressPrefix $subnet.AddressPrefix `
          -NetworkSecurityGroup $nsg | Set-AzureRmVirtualNetwork; 
      






#######################################################

$ResourceGroups = Get-AzureRmResourceGroup ; 





#foreach ($ResourceGroup in $ResourceGroups)
#{    
#    Write-Output ("Showing resources in resource group " + $ResourceGroup.ResourceGroupName)
#    $Resources = Find-AzureRmResource -ResourceGroupNameContains $ResourceGroup.ResourceGroupName | Select ResourceName, ResourceType
#    ForEach ($Resource in $Resources)
#    {
#        Write-Output ($Resource.ResourceName + " of type " +  $Resource.ResourceType)
#    }
#    Write-Output ("")
#} 



#############################################################
### Download Azure Public IP Address Ranges
### Next, you’ll need to download the list of Azure public IP address ranges in XML format.  From this raw XML, you can then extract the list of Azure regions and corresponding public IP address blocks
#############################################################


